#Problem 1. Permutation in strings
#Find out if a string has a permutation of 'abc' based on a string

def permutation_in_string(string1,pattern):
    window_start = 0
    matched_characters = 0
    frequency = {}
    for i in pattern:
        if i not in frequency:
            frequency[i] = 0
        frequency[i] += 1
    
    for window_end in range(len(string1)):
        character = string1[window_end]
        if character in frequency:
            matched_characters += 1
            frequency[character] -= 1
            if frequency[character] == 0:
                matched_characters += 1
        
        if matched_characters == len(frequency):
            return True
        
        if window_end >= len(pattern) - 1:
            left_character = string1[window_start]
            window_start += 1
            if left_character in frequency:
                if frequency[left_character] == 0:
                    matched_characters -= 1
                frequency[left_character] += 1
    return False

print(permutation_in_string("pattbcaern","abc"))

#Problem 2. Anagrams in strings
#Find all anagrams in any given string
#returns the indicies where they're located

def anagram_in_string(string1,pattern):
    windows_start = 0
    matched_chars = 0
    anagram = {}
    final_indicies = []
    for i in pattern:
        if i not in anagram:
            anagram[i] = 0
        anagram[i] += 1
    
    for window_end in range(len(string1)):
        right_character = string1[window_end]
        if right_character in anagram:
            anagram[right_character] -= 1
            if anagram[right_character] == 0:
                matched_chars += 1
    
        if matched_chars == len(anagram):
            final_indicies.append(windows_start)
    
        if window_end >= len(pattern) - 1:
            left_char = string1[windows_start]
            windows_start += 1
            if left_char in anagram:
                if anagram[left_char] == 0:
                    matched_chars -= 1
                anagram[left_char] += 1
    return final_indicies
print(anagram_in_string("abbcabc","abc"))
print(anagram_in_string("ppqp", "pq"))

#Problem #3 Smallest Window containing substring
#Find the smallest substring in the given string which has all the character occurrences of the given pattern.
def smallest_substring(str1,pattern):
    window_start = 0
    matched = 0
    substr_start = 0
    min_length  = len(str1) + 1
    frequency = {}
    
    for char in pattern:
        if char not in frequency:
            frequency[char] = 0
        frequency[char] += 1
    
    for window_end in range(len(str1)):
        right_char = str1[window_end]
        if right_char in frequency:
            frequency[right_char] -= 1
            if frequency[right_char] >= 0:
                matched += 1
        
        while matched == len(pattern):
            if min_length > window_end - window_start + 1:
                min_length = window_end - window_start + 1
                substr_start = window_start
            left_char = str1[window_start]
            window_start += 1
            if left_char in frequency:
                if frequency[left_char] == 0:
                    matched -= 1
                frequency[left_char] += 1
        
    if min_length > len(str1):
        return ""
    return str1[substr_start:substr_start + min_length]
print(smallest_substring("aabdec", "abac"))                
    
#Problem #4 Word Concatanation
# find all the starting indices of substrings in the given string that are a concatenation of all the given words. 
# It is given that all words are of the same length.

def concat_words(string1,words):
    if len(words) == len(words[0]) == 0:
        return []
    
    frequencey = {}
    
    for word in words:
        if word not in frequencey:
            frequencey[word] = 0
        frequencey[word] += 1
        
    final_indecies = []
    word_count  = len(words)
    word_len = len(words[0])
    
    for i in range((len(string1) - word_count * word_len)+1):
        checked_words = {}
        for j in range(0,word_count):
            next_word_index = i + j * word_len
            word = string1[next_word_index: next_word_index + word_len]
            if word not in frequencey:
                break
        
            if word not in checked_words:
                checked_words[word] = 0
            checked_words[word] += 1
        
            if checked_words[word] > frequencey.get(word,0):
                break
        
            if j + 1 == word_count:
                final_indecies.append(i)
    
    return final_indecies 
print(concat_words("catfoxcat", ["cat", "fox"]))
print(concat_words("catcatfoxfox", ["cat", "fox"]))            